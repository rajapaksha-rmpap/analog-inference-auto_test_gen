# Assembler for Chip - Output Processor 
# Output uP Assembly Code 
0:NOP # 
1:MOV,r448,6 # # Init process count 
2:MOV,r449,0 ## Initialize current process id
3:MOV,r492,1 # # Initialize address offset reg
4:LLSHIFT,r492,r492,23 # 
5:MOV,r471,9 # # Initialize base address offset reg
6:LLSHIFT,r471,r471,20 # 
7:MOV,r480,8204 # 
8:OR,r480,r494,r492 # # Initialize Output DMA bsy address reg
9:MOV,r480,8200 # 
10:OR,r480,r493,r492 # # Initialize Output DMA enable address reg
11:MOV,r480,12300 # 
12:OR,r480,r496,r492 # # Initialize Prefetch DMA bsy address reg
13:MOV,r480,12296 # 
14:OR,r480,r495,r492 # # Initialize Prefetch DMA enable address reg
15:MOV,r491,0 ## Initialize grab status reg
16:MOV,r468,0 ## Initialize image end status reg
17:MOV,r470,0 ## Initialize context switch reg
18:MOV,r488,1 ## Initialize current process id
19:LLSHIFTREG,r488,r488,r448 # 
20:SUBI,r488,r488,1 # 
21:MOV,r450,26 # # store proc0 start loc
22:MOV,r460,26 # # store proc0 last loc  
23:MOV,r451,272 # # store proc1 start loc
24:MOV,r461,272 # # store proc1 last loc  
25:MOV,r452,518 # # store proc2 start loc
26:MOV,r462,518 # # store proc2 last loc  
27:MOV,r453,884 # # store proc3 start loc
28:MOV,r463,884 # # store proc3 last loc  
29:MOV,r454,1250 # # store proc4 start loc
30:MOV,r464,1250 # # store proc4 last loc  
31:MOV,r455,1517 # # store proc5 start loc
32:MOV,r465,1517 # # store proc5 last loc  
33:NOP #
34:NOP #
35:NOP #
36:NOP #
37:MOV,r449,0 ## curr proc id
# Switch to proc id
38:ADDI,r449,r510,0 # 
39:SUBI,r510,r510,0 # 
40:BRANZ,2 # 
41:BRAREG,r460 ## branch to counter proc 0 
42:SUBI,r510,r510,1 # 
43:BRANZ,2 # 
44:BRAREG,r461 ## branch to counter proc 1 
45:SUBI,r510,r510,1 # 
46:BRANZ,2 # 
47:BRAREG,r462 ## branch to counter proc 2 
48:SUBI,r510,r510,1 # 
49:BRANZ,2 # 
50:BRAREG,r463 ## branch to counter proc 3 
51:SUBI,r510,r510,1 # 
52:BRANZ,2 # 
53:BRAREG,r464 ## branch to counter proc 4 
54:SUBI,r510,r510,1 # 
55:BRANZ,2 # 
56:BRAREG,r465 ## branch to counter proc 5 
57:SUBI,r510,r510,1 # 
58:BRANZ,2 # 
59:BRAREG,r466 ## branch to counter proc 6 
60:SUBI,r510,r510,1 # 
61:BRANZ,2 # 
62:BRAREG,r467 ## branch to counter proc 7 
# Entry point for context switch
63:NOP # 
64:SUB,r448,r510,r449 # 
65:BRANZ,-27 # 
66:BRAUNCOND,-29 # 
# Layer Instruction Start
67:MOV,r24,0 # 
68:MOV,r44,32768 # 
69:MOV,r480,768 # 
70:LLSHIFT,r480,r480,16 # 
71:OR,r44,r44,r480 # 
72:MOV,r46,65024 # 
73:MOV,r480,799 # 
74:LLSHIFT,r480,r480,16 # 
75:OR,r46,r46,r480 # 
76:MOV,r47,65028 # 
77:MOV,r480,799 # 
78:LLSHIFT,r480,r480,16 # 
79:OR,r47,r47,r480 # 
80:LOAD,r46,r4 ##Start INIT_READ_DATA_STRUCT 
81:LOAD,r47,r43 ##End INIT_READ_DATA_STRUCT
82:MOV,r33,128 # 
83:MOV,r480,784 # 
84:LLSHIFT,r480,r480,16 # 
85:OR,r33,r33,r480 # 
86:MOV,r480,0 # # start STORE_TO_MEMORY 
87:STORE,r33,r480 # # end STORE_TO_MEMORY - write data to address
88:MOV,r1,672 # 
89:MOV,r2,224 # 
90:MOV,r41,4228 # 
91:MOV,r480,4280 # 
92:LLSHIFT,r480,r480,16 # 
93:OR,r41,r41,r480 # 
94:MOV,r58,224 # 
95:MOV,r480,0 # 
96:LLSHIFT,r480,r480,16 # 
97:OR,r58,r58,r480 # 
98:MOV,r35,4096 # 
99:MOV,r480,4280 # 
100:LLSHIFT,r480,r480,16 # 
101:OR,r35,r35,r480 # 
102:MOV,r36,4100 # 
103:MOV,r480,4280 # 
104:LLSHIFT,r480,r480,16 # 
105:OR,r36,r36,r480 # 
106:MOV,r50,4236 # 
107:MOV,r480,4280 # 
108:LLSHIFT,r480,r480,16 # 
109:OR,r50,r50,r480 # 
110:MOV,r51,4148 # 
111:MOV,r480,4280 # 
112:LLSHIFT,r480,r480,16 # 
113:OR,r51,r51,r480 # 
114:MOV,r52,4232 # 
115:MOV,r480,4280 # 
116:LLSHIFT,r480,r480,16 # 
117:OR,r52,r52,r480 # 
118:MOV,r53,4124 # 
119:MOV,r480,4280 # 
120:LLSHIFT,r480,r480,16 # 
121:OR,r53,r53,r480 # 
122:MOV,r59,4144 # 
123:MOV,r480,4280 # 
124:LLSHIFT,r480,r480,16 # 
125:OR,r59,r59,r480 # 
126:MOV,r54,4128 # 
127:MOV,r480,4280 # 
128:LLSHIFT,r480,r480,16 # 
129:OR,r54,r54,r480 # 
130:MOV,r55,4132 # 
131:MOV,r480,4280 # 
132:LLSHIFT,r480,r480,16 # 
133:OR,r55,r55,r480 # 
134:MOV,r56,4136 # 
135:MOV,r480,4280 # 
136:LLSHIFT,r480,r480,16 # 
137:OR,r56,r56,r480 # 
138:MOV,r57,4140 # 
139:MOV,r480,4280 # 
140:LLSHIFT,r480,r480,16 # 
141:OR,r57,r57,r480 # 
142:MOV,r483,1 # 
143:STORE,r35,r483 # 
144:MOV,r483,2 # 
145:STORE,r59,r483 # 
146:MOV,r483,0 # 
147:STORE,r51,r483 # 
148:MOV,r484,82 # 
149:STORE,r52,r484 ##End SET_PCI_DMA_REGS 
150:MOV,r42,1 # 
151:MOV,r60,256 # 
152:MOV,r45,1 # 
153:MOV,r480,0 # 
154:LLSHIFT,r480,r480,16 # 
155:OR,r45,r45,r480 # 
156:MOV,r5,0 # 
157:MOV,r6,1 # 
158:MOV,r7,1088 # 
159:MOV,r10,1172 # 
160:MOV,r9,0 # 
161:MOV,r11,115 # 
162:MOV,r16,2 # 
163:MOV,r12,0 # 
164:MOV,r14,16384 # 
165:MOV,r15,64768 # 
166:MOV,r480,1023 # 
167:LLSHIFT,r480,r480,16 # 
168:OR,r15,r15,r480 # 
169:ADDI,r5,r5,1 # 
170:MOV,r8,1 # 
171:ADDI,r2,r3,0 # 
172:SUB,r3,r3,r8 # 
173:BRAGEZ,3 # 
174:ADDI,r2,r8,0 # 
175:MOV,r1,0 # 
176:ADDI,r7,r482,84 ## Start START_INPUT_TFR_LAYER_CHECK 
177:OR,r482,r482,r492 # 
178:STORE,r482,r8 # # writre to ib_decr_reg
179:OR,r7,r481,r492 # 
180:ADDI,r481,r482,88 # 
181:LOAD,r482,r483 # # read ib_cntr_reg 
182:SUB,r483,r482,r8 # 
183:BRAGEZ,4 # 
184:MOV,r460,135 # 
185:MOV,r449,1 # 
186:BRAUNCOND,-123 # 
187:OR,r7,r481,r492 # 
188:ADDI,r481,r482,104 # 
189:LOAD,r482,r483 # #read ob_cntr_reg 
190:ADDI,r481,r482,96 # 
191:LOAD,r482,r484 # # read ob_full_lvl_reg 
192:SUB,r484,r482,r483 # 
193:SUB,r482,r482,r8 # 
194:BRAGEZ,4 # 
195:MOV,r460,146 # 
196:MOV,r449,1 # 
197:BRAUNCOND,-134 ## End START_INPUT_TFR_LAYER_CHECK 
198:MOV,r17,0 # 
199:ADDI,r44,r18,0 # 
200:MOV,r486,16383 # 
201:AND,r18,r18,r486 # 
202:ADDI,r18,r19,0 # 
203:ADD,r19,r19,r1 # 
204:SUB,r19,r19,r14 # 
205:BRALEZ,2 # 
206:BRAUNCOND,19 # 
207:MOV,r481,1 # #Start START_EXTERNAL_IO 
208:STORE,r50,r481 # 
209:LOAD,r50,r481 # 
210:STORE,r53,r1 # 
211:STORE,r54,r4 # 
212:STORE,r55,r43 # 
213:STORE,r56,r44 # 
214:STORE,r57,r45 # 
215:MOV,r481,1 # 
216:STORE,r36,r481 ##End START_EXTERNAL_IO 
217:OR,r58,r58,r492 # #Start EXTERNAL_IO_DONE 
218:LOAD,r58,r481 # 
219:AND,r481,r481,r60 # 
220:BRANZ,4 # 
221:MOV,r460,176 # 
222:MOV,r449,1 # 
223:BRAUNCOND,-160 # End EXTERNAL_IO_DONE 
224:BRAUNCOND,42 # 
225:MOV,r20,16384 # 
226:SUB,r20,r20,r18 # 
227:MOV,r481,1 # #Start START_EXTERNAL_IO 
228:STORE,r50,r481 # 
229:LOAD,r50,r481 # 
230:STORE,r53,r20 # 
231:STORE,r54,r4 # 
232:STORE,r55,r43 # 
233:STORE,r56,r44 # 
234:STORE,r57,r45 # 
235:MOV,r481,1 # 
236:STORE,r36,r481 ##End START_EXTERNAL_IO 
237:OR,r58,r58,r492 # #Start EXTERNAL_IO_DONE 
238:LOAD,r58,r481 # 
239:AND,r481,r481,r60 # 
240:BRANZ,4 # 
241:MOV,r460,196 # 
242:MOV,r449,1 # 
243:BRAUNCOND,-180 # End EXTERNAL_IO_DONE 
244:ADDI,r4,r21,0 # 
245:ADD,r21,r21,r20 # 
246:ADDI,r44,r20,0 # 
247:MOV,r486,-16384 # 
248:AND,r20,r20,r486 # 
249:MOV,r481,1 # #Start START_EXTERNAL_IO 
250:STORE,r50,r481 # 
251:LOAD,r50,r481 # 
252:STORE,r53,r19 # 
253:STORE,r54,r21 # 
254:STORE,r55,r43 # 
255:STORE,r56,r20 # 
256:STORE,r57,r45 # 
257:MOV,r481,1 # 
258:STORE,r36,r481 ##End START_EXTERNAL_IO 
259:OR,r58,r58,r492 # #Start EXTERNAL_IO_DONE 
260:LOAD,r58,r481 # 
261:AND,r481,r481,r60 # 
262:BRANZ,4 # 
263:MOV,r460,218 # 
264:MOV,r449,1 # 
265:BRAUNCOND,-202 # End EXTERNAL_IO_DONE 
266:MOV,r22,1 # 
267:ADDI,r8,r3,0 # 
268:MOV,r13,1 # 
269:OR,r10,r480,r492 # 
270:STORE,r480,r22 # 
271:MOV,r481,1028 # 
272:OR,r481,r481,r492 # 
273:STORE,r481,r6 # # End POP_SYNC - write to ib_decr_reg
274:MOV,r481,1032 ## Start SEND_SYNC_PREV 
275:OR,r481,r481,r492 # 
276:STORE,r481,r6 ## End SEND_SYNC_PREV - write to asq_send_reg
277:MOV,r482,1048 ## Start SEND_SYNC_NEXT 
278:OR,r482,r482,r492 # 
279:STORE,r482,r6 # # End SEND_SYNC_NEXT
280:MOV,r481,1044 # # Start END_BLOCK_EXTERNAL 
281:OR,r481,r481,r492 # 
282:STORE,r481,r6 ## write to ob_incr_reg - End END_BLOCK_EXTERNAL 
283:SUBI,r3,r3,1 # 
284:BRALEZ,2 # 
285:BRAUNCOND,-16 # 
286:ADD,r4,r4,r1 # 
287:ADD,r24,r24,r1 # 
288:MOV,r486,16383 # 
289:AND,r24,r24,r486 # 
290:MOV,r486,-16384 # 
291:AND,r44,r44,r486 # 
292:ADD,r44,r44,r24 # 
293:SUBI,r2,r2,1 # 
294:BRALEZ,2 # 
295:BRAUNCOND,-131 # 
296:MOV,r28,1 # 
297:MOV,r29,0 # 
298:MOV,r31,1 # 
299:MOV,r32,1192 # 
300:MOV,r33,128 # 
301:MOV,r480,784 # 
302:LLSHIFT,r480,r480,16 # 
303:OR,r33,r33,r480 # 
304:NOP ##Start SET_UP_NEXT 
305:NOP # 
306:NOP # 
307:MOV,r460,31 # 
308:MOV,r449,0 # 
309:BRAUNCOND,-246 # #Branch to the same layer, instruction start location
310:NOP # 
311:NOP # 
312:NOP # 
313:NOP # 
314:HALT # 
315:NOP ##End SET_UP_NEXT 
316:MOV,r88,0 # 
317:MOV,r108,49152 # 
318:MOV,r480,768 # 
319:LLSHIFT,r480,r480,16 # 
320:OR,r108,r108,r480 # 
321:MOV,r110,65036 # 
322:MOV,r480,799 # 
323:LLSHIFT,r480,r480,16 # 
324:OR,r110,r110,r480 # 
325:MOV,r111,65040 # 
326:MOV,r480,799 # 
327:LLSHIFT,r480,r480,16 # 
328:OR,r111,r111,r480 # 
329:LOAD,r110,r68 ##Start INIT_READ_DATA_STRUCT 
330:LOAD,r111,r107 ##End INIT_READ_DATA_STRUCT
331:MOV,r97,128 # 
332:MOV,r480,784 # 
333:LLSHIFT,r480,r480,16 # 
334:OR,r97,r97,r480 # 
335:MOV,r480,0 # # start STORE_TO_MEMORY 
336:STORE,r97,r480 # # end STORE_TO_MEMORY - write data to address
337:MOV,r65,672 # 
338:MOV,r66,224 # 
339:MOV,r105,4228 # 
340:MOV,r480,4280 # 
341:LLSHIFT,r480,r480,16 # 
342:OR,r105,r105,r480 # 
343:MOV,r122,224 # 
344:MOV,r480,0 # 
345:LLSHIFT,r480,r480,16 # 
346:OR,r122,r122,r480 # 
347:MOV,r99,4096 # 
348:MOV,r480,4280 # 
349:LLSHIFT,r480,r480,16 # 
350:OR,r99,r99,r480 # 
351:MOV,r100,4100 # 
352:MOV,r480,4280 # 
353:LLSHIFT,r480,r480,16 # 
354:OR,r100,r100,r480 # 
355:MOV,r114,4236 # 
356:MOV,r480,4280 # 
357:LLSHIFT,r480,r480,16 # 
358:OR,r114,r114,r480 # 
359:MOV,r115,4148 # 
360:MOV,r480,4280 # 
361:LLSHIFT,r480,r480,16 # 
362:OR,r115,r115,r480 # 
363:MOV,r116,4232 # 
364:MOV,r480,4280 # 
365:LLSHIFT,r480,r480,16 # 
366:OR,r116,r116,r480 # 
367:MOV,r117,4124 # 
368:MOV,r480,4280 # 
369:LLSHIFT,r480,r480,16 # 
370:OR,r117,r117,r480 # 
371:MOV,r123,4144 # 
372:MOV,r480,4280 # 
373:LLSHIFT,r480,r480,16 # 
374:OR,r123,r123,r480 # 
375:MOV,r118,4128 # 
376:MOV,r480,4280 # 
377:LLSHIFT,r480,r480,16 # 
378:OR,r118,r118,r480 # 
379:MOV,r119,4132 # 
380:MOV,r480,4280 # 
381:LLSHIFT,r480,r480,16 # 
382:OR,r119,r119,r480 # 
383:MOV,r120,4136 # 
384:MOV,r480,4280 # 
385:LLSHIFT,r480,r480,16 # 
386:OR,r120,r120,r480 # 
387:MOV,r121,4140 # 
388:MOV,r480,4280 # 
389:LLSHIFT,r480,r480,16 # 
390:OR,r121,r121,r480 # 
391:MOV,r483,1 # 
392:STORE,r99,r483 # 
393:MOV,r483,2 # 
394:STORE,r123,r483 # 
395:MOV,r483,0 # 
396:STORE,r115,r483 # 
397:MOV,r484,82 # 
398:STORE,r116,r484 ##End SET_PCI_DMA_REGS 
399:MOV,r106,1 # 
400:MOV,r124,256 # 
401:MOV,r109,1 # 
402:MOV,r480,0 # 
403:LLSHIFT,r480,r480,16 # 
404:OR,r109,r109,r480 # 
405:MOV,r69,0 # 
406:MOV,r70,2 # 
407:MOV,r71,1200 # 
408:MOV,r74,1284 # 
409:MOV,r73,0 # 
410:MOV,r75,116 # 
411:MOV,r80,3 # 
412:MOV,r76,0 # 
413:MOV,r78,16384 # 
414:MOV,r79,64768 # 
415:MOV,r480,1023 # 
416:LLSHIFT,r480,r480,16 # 
417:OR,r79,r79,r480 # 
418:ADDI,r69,r69,1 # 
419:MOV,r72,1 # 
420:ADDI,r66,r67,0 # 
421:SUB,r67,r67,r72 # 
422:BRAGEZ,3 # 
423:ADDI,r66,r72,0 # 
424:MOV,r65,0 # 
425:ADDI,r71,r482,84 ## Start START_INPUT_TFR_LAYER_CHECK 
426:OR,r482,r482,r492 # 
427:STORE,r482,r72 # # writre to ib_decr_reg
428:OR,r71,r481,r492 # 
429:ADDI,r481,r482,88 # 
430:LOAD,r482,r483 # # read ib_cntr_reg 
431:SUB,r483,r482,r72 # 
432:BRAGEZ,4 # 
433:MOV,r461,381 # 
434:MOV,r449,2 # 
435:BRAUNCOND,-372 # 
436:OR,r71,r481,r492 # 
437:ADDI,r481,r482,104 # 
438:LOAD,r482,r483 # #read ob_cntr_reg 
439:ADDI,r481,r482,96 # 
440:LOAD,r482,r484 # # read ob_full_lvl_reg 
441:SUB,r484,r482,r483 # 
442:SUB,r482,r482,r72 # 
443:BRAGEZ,4 # 
444:MOV,r461,392 # 
445:MOV,r449,2 # 
446:BRAUNCOND,-383 ## End START_INPUT_TFR_LAYER_CHECK 
447:MOV,r81,0 # 
448:ADDI,r108,r82,0 # 
449:MOV,r486,16383 # 
450:AND,r82,r82,r486 # 
451:ADDI,r82,r83,0 # 
452:ADD,r83,r83,r65 # 
453:SUB,r83,r83,r78 # 
454:BRALEZ,2 # 
455:BRAUNCOND,19 # 
456:MOV,r481,1 # #Start START_EXTERNAL_IO 
457:STORE,r114,r481 # 
458:LOAD,r114,r481 # 
459:STORE,r117,r65 # 
460:STORE,r118,r68 # 
461:STORE,r119,r107 # 
462:STORE,r120,r108 # 
463:STORE,r121,r109 # 
464:MOV,r481,1 # 
465:STORE,r100,r481 ##End START_EXTERNAL_IO 
466:OR,r122,r122,r492 # #Start EXTERNAL_IO_DONE 
467:LOAD,r122,r481 # 
468:AND,r481,r481,r124 # 
469:BRANZ,4 # 
470:MOV,r461,422 # 
471:MOV,r449,2 # 
472:BRAUNCOND,-409 # End EXTERNAL_IO_DONE 
473:BRAUNCOND,42 # 
474:MOV,r84,16384 # 
475:SUB,r84,r84,r82 # 
476:MOV,r481,1 # #Start START_EXTERNAL_IO 
477:STORE,r114,r481 # 
478:LOAD,r114,r481 # 
479:STORE,r117,r84 # 
480:STORE,r118,r68 # 
481:STORE,r119,r107 # 
482:STORE,r120,r108 # 
483:STORE,r121,r109 # 
484:MOV,r481,1 # 
485:STORE,r100,r481 ##End START_EXTERNAL_IO 
486:OR,r122,r122,r492 # #Start EXTERNAL_IO_DONE 
487:LOAD,r122,r481 # 
488:AND,r481,r481,r124 # 
489:BRANZ,4 # 
490:MOV,r461,442 # 
491:MOV,r449,2 # 
492:BRAUNCOND,-429 # End EXTERNAL_IO_DONE 
493:ADDI,r68,r85,0 # 
494:ADD,r85,r85,r84 # 
495:ADDI,r108,r84,0 # 
496:MOV,r486,-16384 # 
497:AND,r84,r84,r486 # 
498:MOV,r481,1 # #Start START_EXTERNAL_IO 
499:STORE,r114,r481 # 
500:LOAD,r114,r481 # 
501:STORE,r117,r83 # 
502:STORE,r118,r85 # 
503:STORE,r119,r107 # 
504:STORE,r120,r84 # 
505:STORE,r121,r109 # 
506:MOV,r481,1 # 
507:STORE,r100,r481 ##End START_EXTERNAL_IO 
508:OR,r122,r122,r492 # #Start EXTERNAL_IO_DONE 
509:LOAD,r122,r481 # 
510:AND,r481,r481,r124 # 
511:BRANZ,4 # 
512:MOV,r461,464 # 
513:MOV,r449,2 # 
514:BRAUNCOND,-451 # End EXTERNAL_IO_DONE 
515:MOV,r86,1 # 
516:ADDI,r72,r67,0 # 
517:MOV,r77,1 # 
518:OR,r74,r480,r492 # 
519:STORE,r480,r86 # 
520:MOV,r481,1028 # 
521:OR,r481,r481,r492 # 
522:STORE,r481,r70 # # End POP_SYNC - write to ib_decr_reg
523:MOV,r481,1032 ## Start SEND_SYNC_PREV 
524:OR,r481,r481,r492 # 
525:STORE,r481,r70 ## End SEND_SYNC_PREV - write to asq_send_reg
526:MOV,r482,1048 ## Start SEND_SYNC_NEXT 
527:OR,r482,r482,r492 # 
528:STORE,r482,r70 # # End SEND_SYNC_NEXT
529:MOV,r481,1044 # # Start END_BLOCK_EXTERNAL 
530:OR,r481,r481,r492 # 
531:STORE,r481,r70 ## write to ob_incr_reg - End END_BLOCK_EXTERNAL 
532:SUBI,r67,r67,1 # 
533:BRALEZ,2 # 
534:BRAUNCOND,-16 # 
535:ADD,r68,r68,r65 # 
536:ADD,r88,r88,r65 # 
537:MOV,r486,16383 # 
538:AND,r88,r88,r486 # 
539:MOV,r486,-16384 # 
540:AND,r108,r108,r486 # 
541:ADD,r108,r108,r88 # 
542:SUBI,r66,r66,1 # 
543:BRALEZ,2 # 
544:BRAUNCOND,-131 # 
545:MOV,r92,2 # 
546:MOV,r93,1 # 
547:MOV,r95,1 # 
548:MOV,r96,1304 # 
549:MOV,r97,128 # 
550:MOV,r480,784 # 
551:LLSHIFT,r480,r480,16 # 
552:OR,r97,r97,r480 # 
553:NOP ##Start SET_UP_NEXT 
554:NOP # 
555:NOP # 
556:MOV,r461,277 # 
557:MOV,r449,1 # 
558:BRAUNCOND,-495 # #Branch to the same layer, instruction start location
559:NOP # 
560:NOP # 
561:NOP # 
562:NOP # 
563:HALT # 
564:NOP ##End SET_UP_NEXT 
565:MOV,r164,0 # 
566:MOV,r131,0 # 
567:MOV,r170,0 # 
568:MOV,r176,0 # 
569:MOV,r182,0 # 
570:MOV,r480,0 # 
571:LLSHIFT,r480,r480,16 # 
572:OR,r182,r182,r480 # 
573:MOV,r171,0 # 
574:MOV,r177,0 # 
575:MOV,r183,0 # 
576:MOV,r480,0 # 
577:LLSHIFT,r480,r480,16 # 
578:OR,r183,r183,r480 # 
579:MOV,r172,0 # 
580:MOV,r178,0 # 
581:MOV,r184,0 # 
582:MOV,r480,0 # 
583:LLSHIFT,r480,r480,16 # 
584:OR,r184,r184,r480 # 
585:MOV,r173,0 # 
586:MOV,r179,0 # 
587:MOV,r185,0 # 
588:MOV,r480,0 # 
589:LLSHIFT,r480,r480,16 # 
590:OR,r185,r185,r480 # 
591:MOV,r480,33248 ##Start READ_FROM_SCRATCH
592:MOV,r481,208 # 
593:OR,r481,r481,r492 # 
594:STORE,r481,r480 # write process_memory_addr
595:MOV,r481,212 # 
596:OR,r481,r481,r492 # 
597:LOAD,r481,r170 ## End READ_FROM_SCRATCH - read from process_memory_loc 
598:MOV,r480,33252 ##Start READ_FROM_SCRATCH
599:MOV,r481,208 # 
600:OR,r481,r481,r492 # 
601:STORE,r481,r480 # write process_memory_addr
602:MOV,r481,212 # 
603:OR,r481,r481,r492 # 
604:LOAD,r481,r176 ## End READ_FROM_SCRATCH - read from process_memory_loc 
605:MOV,r480,33256 ##Start READ_FROM_SCRATCH
606:MOV,r481,208 # 
607:OR,r481,r481,r492 # 
608:STORE,r481,r480 # write process_memory_addr
609:MOV,r481,212 # 
610:OR,r481,r481,r492 # 
611:LOAD,r481,r182 ## End READ_FROM_SCRATCH - read from process_memory_loc 
612:MOV,r133,0 # 
613:MOV,r150,1 # 
614:MOV,r169,256 # 
615:MOV,r153,0 # 
616:MOV,r155,0 # 
617:ADDI,r150,r484,0 # # Start SET_MULTICAST_ADDR
618:SUBI,r484,r484,1 # 
619:BRALEZ,69 # 
620:ADDI,r169,r480,0 # 
621:OR,r480,r480,r492 # 
622:ADDI,r150,r484,1 # 
623:SUBI,r155,r485,0 # 
624:BRALEZ,8 # # Jump to first dest_detail
625:SUBI,r155,r485,1 # 
626:BRALEZ,19 # # Jump to second dest detail 
627:SUBI,r155,r485,2 # 
628:BRALEZ,31 # # Jump to third dest detail 
629:SUBI,r155,r485,3 # 
630:BRALEZ,43 # # Jumpt to fourth dest detail 
631:BRAUNCOND,57 # 
632:AND,r176,r481,r170 # 
633:ADDI,r182,r481,0 # 
634:SUBI,r484,r484,1 # 
635:BRALEZ,4 # 
636:ORI,r481,r481,1 # 
637:ADDI,r484,r484,0 # 
638:BRAUNCOND,2 # 
639:MOV,r481,0 # 
640:STORE,r480,r481 # 
641:ADDI,r480,r481,4 # 
642:STORE,r481,r176 # 
643:ADDI,r480,r481,8 # 
644:STORE,r481,r170 # 
645:ADDI,r480,r486,16 # 
646:AND,r177,r481,r171 # 
647:ADDI,r183,r481,0 # 
648:SUBI,r484,r484,1 # 
649:BRALEZ,4 # 
650:ORI,r481,r481,1 # 
651:ADDI,r484,r484,0 # 
652:BRAUNCOND,2 # 
653:MOV,r481,0 # 
654:STORE,r486,r481 # 
655:ADDI,r486,r481,4 # 
656:STORE,r481,r177 # 
657:ADDI,r486,r481,8 # 
658:STORE,r481,r171 # 
659:ADDI,r480,r486,32 # 
660:AND,r178,r481,r172 # 
661:ADDI,r184,r481,0 # 
662:SUBI,r484,r484,1 # 
663:BRALEZ,4 # 
664:ORI,r481,r481,1 # 
665:ADDI,r484,r484,0 # 
666:BRAUNCOND,2 # 
667:MOV,r481,0 # 
668:STORE,r486,r481 # 
669:ADDI,r486,r481,4 # 
670:STORE,r481,r178 # 
671:ADDI,r486,r481,8 # 
672:STORE,r481,r172 # 
673:ADDI,r480,r486,48 # 
674:AND,r179,r481,r173 # 
675:ADDI,r185,r481,0 # 
676:SUBI,r484,r484,1 # 
677:BRALEZ,4 # 
678:ORI,r481,r481,1 # 
679:ADDI,r484,r484,0 # 
680:BRAUNCOND,2 # 
681:MOV,r481,0 # 
682:STORE,r486,r481 # 
683:ADDI,r486,r481,4 # 
684:STORE,r481,r179 # 
685:ADDI,r486,r481,8 # 
686:STORE,r481,r173 # 
687:NOP # # End SET_MULTICAST_ADDR
688:MOV,r155,32768 # 
689:MOV,r480,768 # 
690:LLSHIFT,r480,r480,16 # 
691:OR,r155,r155,r480 # 
692:MOV,r161,128 # 
693:MOV,r480,784 # 
694:LLSHIFT,r480,r480,16 # 
695:OR,r161,r161,r480 # 
696:MOV,r480,0 # # start STORE_TO_MEMORY 
697:STORE,r161,r480 # # end STORE_TO_MEMORY - write data to address
698:MOV,r129,672 # 
699:MOV,r128,0 # 
700:MOV,r138,2 # 
701:MOV,r139,0 # 
702:MOV,r140,1 # 
703:MOV,r141,8 # 
704:MOV,r154,9216 # 
705:MOV,r143,16383 # 
706:MOV,r147,4 # 
707:MOV,r148,1312 # 
708:MOV,r161,0 # 
709:MOV,r162,1396 # 
710:MOV,r168,0 # 
711:MOV,r175,1023 # 
712:MOV,r187,1 # 
713:MOV,r181,8992 # 
714:MOV,r180,128 # 
715:ADDI,r181,r480,0 ## Start SET_LYR_REG 
716:OR,r480,r480,r492 # 
717:STORE,r480,r143 # # write to addr_mask_reg
718:ADDI,r480,r483,4 # 
719:STORE,r483,r155 # # write to base_addr_reg
720:LLSHIFT,r128,r482,16 # 
721:OR,r482,r482,r180 # 
722:ADDI,r480,r483,8 # 
723:STORE,r483,r482 # #wite to addr_stp_reg
724:MOV,r480,8228 # 
725:OR,r480,r480,r492 # 
726:LOAD,r480,r481 # 
727:OR,r481,r481,r128 # 
728:STORE,r480,r481 # # end SET_OUTPUT_LYR_REG - write to xbar_grp_reg
729:MOV,r180,336 # 
730:MOV,r181,96 # 
731:MOV,r130,0 # 
732:MOV,r180,0 # 
733:MOV,r146,0 # 
734:MOV,r130,224 # 
735:MOV,r145,0 # 
736:MOV,r135,0 # 
737:ADDI,r145,r132,0 # 
738:ADDI,r132,r132,1 # 
739:MOV,r133,1 # 
740:ADDI,r148,r482,84 # # Start START_INPUT_TFR_LAYER
741:OR,r482,r482,r492 # 
742:STORE,r482,r133 # # End START_INPUT_TFR_LAYER
743:MOV,r134,1 # 
744:MOV,r144,128 # 
745:MOV,r166,0 # 
746:MOV,r150,1 # 
747:MOV,r186,672 # 
748:MOV,r165,0 # 
749:MOV,r167,256 # 
750:MOV,r169,0 # 
751:MOV,r151,0 # 
752:SUBI,r169,r169,0 # 
753:BRALEZ,2 # 
754:BRAUNCOND,5 # 
755:MOV,r151,0 # 
756:MOV,r480,0 # 
757:LLSHIFT,r480,r480,16 # 
758:OR,r151,r151,r480 # 
759:MOV,r152,672 # 
760:MOV,r156,0 # 
761:MOV,r160,0 # 
762:MOV,r480,33008 ##Start READ_FROM_SCRATCH
763:MOV,r481,208 # 
764:OR,r481,r481,r492 # 
765:STORE,r481,r480 # write process_memory_addr
766:MOV,r481,212 # 
767:OR,r481,r481,r492 # 
768:LOAD,r481,r174 ## End READ_FROM_SCRATCH - read from process_memory_loc 
769:MOV,r163,16383 # 
770:MOV,r480,0 # 
771:LLSHIFT,r480,r480,16 # 
772:OR,r163,r163,r480 # 
773:STOREI,r181,r174 # #Start SET_SIMD_BASE- write to simd_base_addr_reg
774:ADDI,r181,r480,4 # 
775:STOREI,r480,r163 # #write to simd_addr_mask_reg - End SET_SIMD_BASE 
776:NOP # # Instruction not used in Assembly Generation
777:ADDI,r144,r144,1 # 
778:ADD,r166,r166,r150 # 
779:ADDI,r164,r169,0 # 
780:ADDI,r152,r158,0 # 
781:MOV,r486,2048 # 
782:SUB,r152,r152,r486 # 
783:BRALEZ,2 # 
784:MOV,r158,2048 # 
785:ADDI,r131,r136,0 # 
786:ADD,r136,r136,r135 # 
787:MOV,r483,1 # # start TFR_OUT_LAYER_MEM
788:LLSHIFTREG,r483,r483,r161 # 
789:LOAD,r494,r481 # 
790:AND,r481,r481,r483 # 
791:BRAZ,2 # 
792:BRAUNCOND,-3 # 
793:ADDI,r154,r480,0 # 
794:OR,r480,r480,r492 # 
795:ADDI,r480,r482,20 # 
796:MOV,r481,1 # 
797:LLSHIFT,r481,r481,4 # 
798:OR,r481,r481,r138 # 
799:STORE,r482,r481 # #write to mb_config_reg
800:ADDI,r480,r480,32 # 
801:ADDI,r158,r482,0 # 
802:LLSHIFT,r482,r482,16 # 
803:ORI,r482,r482,1 # 
804:STORE,r480,r482 ## write to cmd_wd0_reg 
805:AND,r136,r481,r143 # 
806:ADD,r481,r481,r155 # 
807:ADDI,r480,r480,4 # 
808:STORE,r480,r481 # # write to cmd_wd1_reg 
809:ADDI,r154,r480,0 # 
810:ADDI,r480,r480,0 # 
811:OR,r480,r480,r492 # 
812:ADDI,r158,r481,0 # 
813:STORE,r480,r481 # # write to bt_size_reg
814:MOV,r480,8200 # 
815:OR,r480,r480,r492 # 
816:LOAD,r480,r482 # # read cmd_list_en_Reg 
817:MOV,r483,1 # 
818:LLSHIFTREG,r483,r483,r161 # 
819:NOT,r483,r484 # 
820:AND,r484,r485,r482 # 
821:STORE,r480,r485 # write to cmd_list_en_reg with complementary val
822:OR,r483,r482,r482 # 
823:STORE,r480,r482 ## End TFR_OUT_LAYER_MEM - write to cmd_list_en_reg 
824:MOV,r480,20 # # start CHECK_LAYER_MEM_IOPE 
825:LOADI,r480,r481 # #read mac_cmd_data_fifo_status_reg
826:ANDI,r481,r481,1 # 
827:BRAZ,4 # 
828:MOV,r462,777 # 
829:MOV,r449,3 # 
830:BRAUNCOND,-767 # 
831:MOV,r480,48 # 
832:LOADI,r480,r481 # # read simd_intr_lyr_reg 
833:ANDI,r481,r481,7 # 
834:SUB,r481,r482,r449 # 
835:BRAZ,4 # 
836:MOV,r462,784 # 
837:ADDI,r481,r449,0 # 
838:BRAUNCOND,-775 # 
839:MOV,r480,4 # 
840:LOADI,r480,r472 ##End CHECK_LAYER_MEM_IOPE
841:ADDI,r135,r153,0 # 
842:SUB,r153,r153,r160 # 
843:ADD,r169,r169,r151 # 
844:MOV,r480,44 ## Start Set_IOPE_GAP 
845:LLSHIFT,r187,r481,28 # 
846:LLSHIFT,r158,r482,9 # 
847:OR,r481,r481,r482 # 
848:LLSHIFT,r187,r482,21 # 
849:OR,r481,r481,r482 # 
850:LLSHIFT,r180,r482,22 # 
851:OR,r481,r481,r482 # 
852:STOREI,r480,r481 ## write to gap_cmd2_reg 
853:MOV,r480,0 # 
854:ADD,r169,r483,r153 # 
855:MOV,r484,255 # 
856:LLSHIFT,r484,r484,24 # 
857:AND,r472,r485,r484 # 
858:OR,r483,r483,r485 # 
859:STOREI,r480,r483 # # End Set_IOPE_GAP - write to gap_cmd_reg
860:NOP # # Instruction not used in Assembly Generation
861:ADD,r135,r135,r158 # 
862:SUBI,r152,r152,0 # 
863:BRALEZ,2 # 
864:BRAUNCOND,-84 # 
865:MOV,r480,12 # 
866:LOADI,r480,r481 # 
867:ANDI,r481,r481,1 # 
868:BRANZ,2 # 
869:BRAUNCOND,-3 #  # End CHECK_SIMD_STATUS
870:ADDI,r170,r170,672 # 
871:MOV,r134,0 # 
872:MOV,r480,12 # 
873:LOADI,r480,r481 # #read simd_wbuf_addr_status_reg 
874:ANDI,r481,r481,1 # 
875:BRANZ,2 # 
876:BRAUNCOND,-3 # End END_BLOCK 
877:MOV,r480,1044 # 
878:OR,r480,r480,r492 # 
879:STORE,r480,r147 # # End INCREMENT_OBUF_COUNTER  
880:MOV,r483,1 # 
881:LLSHIFTREG,r483,r483,r161 # 
882:LOAD,r494,r481 # 
883:AND,r481,r481,r483 # 
884:BRAZ,2 # 
885:BRAUNCOND,-3 # # End CHECK_OUTPUT_DMA_BUSY
886:MOV,r142,1 # 
887:MOV,r150,1 # 
888:MOV,r482,1048 ## Start SEND_SYNC_NEXT 
889:OR,r482,r482,r492 # 
890:STORE,r482,r147 # # End SEND_SYNC_NEXT
891:SUBI,r150,r150,1 # 
892:BRALEZ,2 # 
893:BRAUNCOND,-5 # 
894:ADDI,r142,r166,0 # 
895:OR,r162,r480,r492 # 
896:STORE,r480,r142 # 
897:MOV,r481,1028 # 
898:OR,r481,r481,r492 # 
899:STORE,r481,r147 # # End POP_SYNC - write to ib_decr_reg
900:MOV,r481,1032 ## Start SEND_SYNC_PREV 
901:OR,r481,r481,r492 # 
902:STORE,r481,r147 ## End SEND_SYNC_PREV - write to asq_send_reg
903:SUBI,r166,r166,1 # 
904:BRALEZ,2 # 
905:BRAUNCOND,-10 # 
906:ADD,r146,r146,r186 # 
907:ADDI,r131,r131,672 # 
908:ADD,r164,r164,r186 # 
909:ADDI,r145,r145,1 # 
910:SUBI,r130,r130,1 # 
911:BRALEZ,2 # 
912:BRAUNCOND,-176 # 
913:ADD,r155,r155,r136 # 
914:MOV,r156,4 # 
915:MOV,r157,2 # 
916:MOV,r158,1416 # 
917:MOV,r159,1 # 
918:MOV,r161,128 # 
919:MOV,r480,784 # 
920:LLSHIFT,r480,r480,16 # 
921:OR,r161,r161,r480 # 
922:NOP ##Start SET_UP_NEXT 
923:NOP # 
924:NOP # 
925:MOV,r462,641 # 
926:MOV,r449,2 # 
927:BRAUNCOND,-864 # #Branch to the same layer, instruction start location
928:NOP # 
929:NOP # 
930:NOP # 
931:NOP # 
932:HALT # 
933:NOP ##End SET_UP_NEXT 
934:MOV,r228,0 # 
935:MOV,r195,0 # 
936:MOV,r234,0 # 
937:MOV,r240,0 # 
938:MOV,r246,0 # 
939:MOV,r480,0 # 
940:LLSHIFT,r480,r480,16 # 
941:OR,r246,r246,r480 # 
942:MOV,r235,0 # 
943:MOV,r241,0 # 
944:MOV,r247,0 # 
945:MOV,r480,0 # 
946:LLSHIFT,r480,r480,16 # 
947:OR,r247,r247,r480 # 
948:MOV,r236,0 # 
949:MOV,r242,0 # 
950:MOV,r248,0 # 
951:MOV,r480,0 # 
952:LLSHIFT,r480,r480,16 # 
953:OR,r248,r248,r480 # 
954:MOV,r237,0 # 
955:MOV,r243,0 # 
956:MOV,r249,0 # 
957:MOV,r480,0 # 
958:LLSHIFT,r480,r480,16 # 
959:OR,r249,r249,r480 # 
960:MOV,r480,33312 ##Start READ_FROM_SCRATCH
961:MOV,r481,208 # 
962:OR,r481,r481,r492 # 
963:STORE,r481,r480 # write process_memory_addr
964:MOV,r481,212 # 
965:OR,r481,r481,r492 # 
966:LOAD,r481,r234 ## End READ_FROM_SCRATCH - read from process_memory_loc 
967:MOV,r480,33316 ##Start READ_FROM_SCRATCH
968:MOV,r481,208 # 
969:OR,r481,r481,r492 # 
970:STORE,r481,r480 # write process_memory_addr
971:MOV,r481,212 # 
972:OR,r481,r481,r492 # 
973:LOAD,r481,r240 ## End READ_FROM_SCRATCH - read from process_memory_loc 
974:MOV,r480,33320 ##Start READ_FROM_SCRATCH
975:MOV,r481,208 # 
976:OR,r481,r481,r492 # 
977:STORE,r481,r480 # write process_memory_addr
978:MOV,r481,212 # 
979:OR,r481,r481,r492 # 
980:LOAD,r481,r246 ## End READ_FROM_SCRATCH - read from process_memory_loc 
981:MOV,r197,0 # 
982:MOV,r214,1 # 
983:MOV,r233,256 # 
984:MOV,r217,0 # 
985:MOV,r219,0 # 
986:ADDI,r214,r484,0 # # Start SET_MULTICAST_ADDR
987:SUBI,r484,r484,1 # 
988:BRALEZ,69 # 
989:ADDI,r233,r480,0 # 
990:OR,r480,r480,r492 # 
991:ADDI,r214,r484,1 # 
992:SUBI,r219,r485,0 # 
993:BRALEZ,8 # # Jump to first dest_detail
994:SUBI,r219,r485,1 # 
995:BRALEZ,19 # # Jump to second dest detail 
996:SUBI,r219,r485,2 # 
997:BRALEZ,31 # # Jump to third dest detail 
998:SUBI,r219,r485,3 # 
999:BRALEZ,43 # # Jumpt to fourth dest detail 
1000:BRAUNCOND,57 # 
1001:AND,r240,r481,r234 # 
1002:ADDI,r246,r481,0 # 
1003:SUBI,r484,r484,1 # 
1004:BRALEZ,4 # 
1005:ORI,r481,r481,1 # 
1006:ADDI,r484,r484,0 # 
1007:BRAUNCOND,2 # 
1008:MOV,r481,0 # 
1009:STORE,r480,r481 # 
1010:ADDI,r480,r481,4 # 
1011:STORE,r481,r240 # 
1012:ADDI,r480,r481,8 # 
1013:STORE,r481,r234 # 
1014:ADDI,r480,r486,16 # 
1015:AND,r241,r481,r235 # 
1016:ADDI,r247,r481,0 # 
1017:SUBI,r484,r484,1 # 
1018:BRALEZ,4 # 
1019:ORI,r481,r481,1 # 
1020:ADDI,r484,r484,0 # 
1021:BRAUNCOND,2 # 
1022:MOV,r481,0 # 
1023:STORE,r486,r481 # 
1024:ADDI,r486,r481,4 # 
1025:STORE,r481,r241 # 
1026:ADDI,r486,r481,8 # 
1027:STORE,r481,r235 # 
1028:ADDI,r480,r486,32 # 
1029:AND,r242,r481,r236 # 
1030:ADDI,r248,r481,0 # 
1031:SUBI,r484,r484,1 # 
1032:BRALEZ,4 # 
1033:ORI,r481,r481,1 # 
1034:ADDI,r484,r484,0 # 
1035:BRAUNCOND,2 # 
1036:MOV,r481,0 # 
1037:STORE,r486,r481 # 
1038:ADDI,r486,r481,4 # 
1039:STORE,r481,r242 # 
1040:ADDI,r486,r481,8 # 
1041:STORE,r481,r236 # 
1042:ADDI,r480,r486,48 # 
1043:AND,r243,r481,r237 # 
1044:ADDI,r249,r481,0 # 
1045:SUBI,r484,r484,1 # 
1046:BRALEZ,4 # 
1047:ORI,r481,r481,1 # 
1048:ADDI,r484,r484,0 # 
1049:BRAUNCOND,2 # 
1050:MOV,r481,0 # 
1051:STORE,r486,r481 # 
1052:ADDI,r486,r481,4 # 
1053:STORE,r481,r243 # 
1054:ADDI,r486,r481,8 # 
1055:STORE,r481,r237 # 
1056:NOP # # End SET_MULTICAST_ADDR
1057:MOV,r219,49152 # 
1058:MOV,r480,768 # 
1059:LLSHIFT,r480,r480,16 # 
1060:OR,r219,r219,r480 # 
1061:MOV,r225,128 # 
1062:MOV,r480,784 # 
1063:LLSHIFT,r480,r480,16 # 
1064:OR,r225,r225,r480 # 
1065:MOV,r480,0 # # start STORE_TO_MEMORY 
1066:STORE,r225,r480 # # end STORE_TO_MEMORY - write data to address
1067:MOV,r193,672 # 
1068:MOV,r192,0 # 
1069:MOV,r202,3 # 
1070:MOV,r203,0 # 
1071:MOV,r204,1 # 
1072:MOV,r205,8 # 
1073:MOV,r218,9344 # 
1074:MOV,r207,16383 # 
1075:MOV,r211,8 # 
1076:MOV,r212,1424 # 
1077:MOV,r225,1 # 
1078:MOV,r226,1508 # 
1079:MOV,r232,0 # 
1080:MOV,r239,1023 # 
1081:MOV,r251,1 # 
1082:MOV,r245,9008 # 
1083:MOV,r244,128 # 
1084:ADDI,r245,r480,0 ## Start SET_LYR_REG 
1085:OR,r480,r480,r492 # 
1086:STORE,r480,r207 # # write to addr_mask_reg
1087:ADDI,r480,r483,4 # 
1088:STORE,r483,r219 # # write to base_addr_reg
1089:LLSHIFT,r192,r482,16 # 
1090:OR,r482,r482,r244 # 
1091:ADDI,r480,r483,8 # 
1092:STORE,r483,r482 # #wite to addr_stp_reg
1093:MOV,r480,8228 # 
1094:OR,r480,r480,r492 # 
1095:LOAD,r480,r481 # 
1096:OR,r481,r481,r192 # 
1097:STORE,r480,r481 # # end SET_OUTPUT_LYR_REG - write to xbar_grp_reg
1098:MOV,r244,368 # 
1099:MOV,r245,112 # 
1100:MOV,r194,0 # 
1101:MOV,r244,512 # 
1102:MOV,r210,0 # 
1103:MOV,r194,224 # 
1104:MOV,r209,0 # 
1105:MOV,r199,0 # 
1106:ADDI,r209,r196,0 # 
1107:ADDI,r196,r196,1 # 
1108:MOV,r197,1 # 
1109:ADDI,r212,r482,84 # # Start START_INPUT_TFR_LAYER
1110:OR,r482,r482,r492 # 
1111:STORE,r482,r197 # # End START_INPUT_TFR_LAYER
1112:MOV,r198,1 # 
1113:MOV,r208,192 # 
1114:MOV,r230,0 # 
1115:MOV,r214,1 # 
1116:MOV,r250,672 # 
1117:MOV,r229,0 # 
1118:MOV,r231,256 # 
1119:MOV,r233,0 # 
1120:MOV,r215,0 # 
1121:SUBI,r233,r233,0 # 
1122:BRALEZ,2 # 
1123:BRAUNCOND,5 # 
1124:MOV,r215,0 # 
1125:MOV,r480,0 # 
1126:LLSHIFT,r480,r480,16 # 
1127:OR,r215,r215,r480 # 
1128:MOV,r216,672 # 
1129:MOV,r220,0 # 
1130:MOV,r224,0 # 
1131:MOV,r480,33024 ##Start READ_FROM_SCRATCH
1132:MOV,r481,208 # 
1133:OR,r481,r481,r492 # 
1134:STORE,r481,r480 # write process_memory_addr
1135:MOV,r481,212 # 
1136:OR,r481,r481,r492 # 
1137:LOAD,r481,r238 ## End READ_FROM_SCRATCH - read from process_memory_loc 
1138:MOV,r227,16383 # 
1139:MOV,r480,0 # 
1140:LLSHIFT,r480,r480,16 # 
1141:OR,r227,r227,r480 # 
1142:STOREI,r245,r238 # #Start SET_SIMD_BASE- write to simd_base_addr_reg
1143:ADDI,r245,r480,4 # 
1144:STOREI,r480,r227 # #write to simd_addr_mask_reg - End SET_SIMD_BASE 
1145:NOP # # Instruction not used in Assembly Generation
1146:ADDI,r208,r208,1 # 
1147:ADD,r230,r230,r214 # 
1148:ADDI,r228,r233,0 # 
1149:ADDI,r216,r222,0 # 
1150:MOV,r486,2048 # 
1151:SUB,r216,r216,r486 # 
1152:BRALEZ,2 # 
1153:MOV,r222,2048 # 
1154:ADDI,r195,r200,0 # 
1155:ADD,r200,r200,r199 # 
1156:MOV,r483,1 # # start TFR_OUT_LAYER_MEM
1157:LLSHIFTREG,r483,r483,r225 # 
1158:LOAD,r494,r481 # 
1159:AND,r481,r481,r483 # 
1160:BRAZ,2 # 
1161:BRAUNCOND,-3 # 
1162:ADDI,r218,r480,0 # 
1163:OR,r480,r480,r492 # 
1164:ADDI,r480,r482,20 # 
1165:MOV,r481,1 # 
1166:LLSHIFT,r481,r481,4 # 
1167:OR,r481,r481,r202 # 
1168:STORE,r482,r481 # #write to mb_config_reg
1169:ADDI,r480,r480,32 # 
1170:ADDI,r222,r482,0 # 
1171:LLSHIFT,r482,r482,16 # 
1172:ORI,r482,r482,1 # 
1173:STORE,r480,r482 ## write to cmd_wd0_reg 
1174:AND,r200,r481,r207 # 
1175:ADD,r481,r481,r219 # 
1176:ADDI,r480,r480,4 # 
1177:STORE,r480,r481 # # write to cmd_wd1_reg 
1178:ADDI,r218,r480,0 # 
1179:ADDI,r480,r480,0 # 
1180:OR,r480,r480,r492 # 
1181:ADDI,r222,r481,0 # 
1182:STORE,r480,r481 # # write to bt_size_reg
1183:MOV,r480,8200 # 
1184:OR,r480,r480,r492 # 
1185:LOAD,r480,r482 # # read cmd_list_en_Reg 
1186:MOV,r483,1 # 
1187:LLSHIFTREG,r483,r483,r225 # 
1188:NOT,r483,r484 # 
1189:AND,r484,r485,r482 # 
1190:STORE,r480,r485 # write to cmd_list_en_reg with complementary val
1191:OR,r483,r482,r482 # 
1192:STORE,r480,r482 ## End TFR_OUT_LAYER_MEM - write to cmd_list_en_reg 
1193:MOV,r480,20 # # start CHECK_LAYER_MEM_IOPE 
1194:LOADI,r480,r481 # #read mac_cmd_data_fifo_status_reg
1195:ANDI,r481,r481,1 # 
1196:BRAZ,4 # 
1197:MOV,r463,1143 # 
1198:MOV,r449,4 # 
1199:BRAUNCOND,-1136 # 
1200:MOV,r480,48 # 
1201:LOADI,r480,r481 # # read simd_intr_lyr_reg 
1202:ANDI,r481,r481,7 # 
1203:SUB,r481,r482,r449 # 
1204:BRAZ,4 # 
1205:MOV,r463,1150 # 
1206:ADDI,r481,r449,0 # 
1207:BRAUNCOND,-1144 # 
1208:MOV,r480,4 # 
1209:LOADI,r480,r472 ##End CHECK_LAYER_MEM_IOPE
1210:ADDI,r199,r217,0 # 
1211:SUB,r217,r217,r224 # 
1212:ADD,r233,r233,r215 # 
1213:MOV,r480,44 ## Start Set_IOPE_GAP 
1214:LLSHIFT,r251,r481,28 # 
1215:LLSHIFT,r222,r482,9 # 
1216:OR,r481,r481,r482 # 
1217:LLSHIFT,r251,r482,21 # 
1218:OR,r481,r481,r482 # 
1219:LLSHIFT,r244,r482,22 # 
1220:OR,r481,r481,r482 # 
1221:STOREI,r480,r481 ## write to gap_cmd2_reg 
1222:MOV,r480,0 # 
1223:ADD,r233,r483,r217 # 
1224:MOV,r484,255 # 
1225:LLSHIFT,r484,r484,24 # 
1226:AND,r472,r485,r484 # 
1227:OR,r483,r483,r485 # 
1228:STOREI,r480,r483 # # End Set_IOPE_GAP - write to gap_cmd_reg
1229:NOP # # Instruction not used in Assembly Generation
1230:ADD,r199,r199,r222 # 
1231:SUBI,r216,r216,0 # 
1232:BRALEZ,2 # 
1233:BRAUNCOND,-84 # 
1234:MOV,r480,12 # 
1235:LOADI,r480,r481 # 
1236:ANDI,r481,r481,1 # 
1237:BRANZ,2 # 
1238:BRAUNCOND,-3 #  # End CHECK_SIMD_STATUS
1239:ADDI,r234,r234,672 # 
1240:MOV,r198,0 # 
1241:MOV,r480,12 # 
1242:LOADI,r480,r481 # #read simd_wbuf_addr_status_reg 
1243:ANDI,r481,r481,1 # 
1244:BRANZ,2 # 
1245:BRAUNCOND,-3 # End END_BLOCK 
1246:MOV,r480,1044 # 
1247:OR,r480,r480,r492 # 
1248:STORE,r480,r211 # # End INCREMENT_OBUF_COUNTER  
1249:MOV,r483,1 # 
1250:LLSHIFTREG,r483,r483,r225 # 
1251:LOAD,r494,r481 # 
1252:AND,r481,r481,r483 # 
1253:BRAZ,2 # 
1254:BRAUNCOND,-3 # # End CHECK_OUTPUT_DMA_BUSY
1255:MOV,r206,1 # 
1256:MOV,r214,1 # 
1257:MOV,r482,1048 ## Start SEND_SYNC_NEXT 
1258:OR,r482,r482,r492 # 
1259:STORE,r482,r211 # # End SEND_SYNC_NEXT
1260:SUBI,r214,r214,1 # 
1261:BRALEZ,2 # 
1262:BRAUNCOND,-5 # 
1263:ADDI,r206,r230,0 # 
1264:OR,r226,r480,r492 # 
1265:STORE,r480,r206 # 
1266:MOV,r481,1028 # 
1267:OR,r481,r481,r492 # 
1268:STORE,r481,r211 # # End POP_SYNC - write to ib_decr_reg
1269:MOV,r481,1032 ## Start SEND_SYNC_PREV 
1270:OR,r481,r481,r492 # 
1271:STORE,r481,r211 ## End SEND_SYNC_PREV - write to asq_send_reg
1272:SUBI,r230,r230,1 # 
1273:BRALEZ,2 # 
1274:BRAUNCOND,-10 # 
1275:ADD,r210,r210,r250 # 
1276:ADDI,r195,r195,672 # 
1277:ADD,r228,r228,r250 # 
1278:ADDI,r209,r209,1 # 
1279:SUBI,r194,r194,1 # 
1280:BRALEZ,2 # 
1281:BRAUNCOND,-176 # 
1282:ADD,r219,r219,r200 # 
1283:MOV,r220,8 # 
1284:MOV,r221,3 # 
1285:MOV,r222,1528 # 
1286:MOV,r223,1 # 
1287:MOV,r225,128 # 
1288:MOV,r480,784 # 
1289:LLSHIFT,r480,r480,16 # 
1290:OR,r225,r225,r480 # 
1291:NOP ##Start SET_UP_NEXT 
1292:NOP # 
1293:NOP # 
1294:MOV,r463,1007 # 
1295:MOV,r449,3 # 
1296:BRAUNCOND,-1233 # #Branch to the same layer, instruction start location
1297:NOP # 
1298:NOP # 
1299:NOP # 
1300:NOP # 
1301:HALT # 
1302:NOP ##End SET_UP_NEXT 
1303:MOV,r260,0 # 
1304:MOV,r480,769 # 
1305:LLSHIFT,r480,r480,16 # 
1306:OR,r260,r260,r480 # 
1307:MOV,r299,1 # 
1308:MOV,r480,0 # 
1309:LLSHIFT,r480,r480,16 # 
1310:OR,r299,r299,r480 # 
1311:MOV,r280,0 # 
1312:MOV,r302,65048 # 
1313:MOV,r480,799 # 
1314:LLSHIFT,r480,r480,16 # 
1315:OR,r302,r302,r480 # 
1316:MOV,r303,65052 # 
1317:MOV,r480,799 # 
1318:LLSHIFT,r480,r480,16 # 
1319:OR,r303,r303,r480 # 
1320:LOAD,r302,r300 ##Start INIT_WRITE_DATA_STRUCT 
1321:LOAD,r303,r301 ##End INIT_WRITE_DATA_STRUCT
1322:MOV,r289,128 # 
1323:MOV,r480,784 # 
1324:LLSHIFT,r480,r480,16 # 
1325:OR,r289,r289,r480 # 
1326:MOV,r480,0 # # start STORE_TO_MEMORY 
1327:STORE,r289,r480 # # end STORE_TO_MEMORY - write data to address
1328:MOV,r257,147 # 
1329:MOV,r258,7 # 
1330:MOV,r297,132 # 
1331:MOV,r480,4280 # 
1332:LLSHIFT,r480,r480,16 # 
1333:OR,r297,r297,r480 # 
1334:MOV,r314,224 # 
1335:MOV,r480,0 # 
1336:LLSHIFT,r480,r480,16 # 
1337:OR,r314,r314,r480 # 
1338:MOV,r291,0 # 
1339:MOV,r480,4280 # 
1340:LLSHIFT,r480,r480,16 # 
1341:OR,r291,r291,r480 # 
1342:MOV,r292,4 # 
1343:MOV,r480,4280 # 
1344:LLSHIFT,r480,r480,16 # 
1345:OR,r292,r292,r480 # 
1346:MOV,r306,140 # 
1347:MOV,r480,4280 # 
1348:LLSHIFT,r480,r480,16 # 
1349:OR,r306,r306,r480 # 
1350:MOV,r307,52 # 
1351:MOV,r480,4280 # 
1352:LLSHIFT,r480,r480,16 # 
1353:OR,r307,r307,r480 # 
1354:MOV,r308,136 # 
1355:MOV,r480,4280 # 
1356:LLSHIFT,r480,r480,16 # 
1357:OR,r308,r308,r480 # 
1358:MOV,r309,28 # 
1359:MOV,r480,4280 # 
1360:LLSHIFT,r480,r480,16 # 
1361:OR,r309,r309,r480 # 
1362:MOV,r315,48 # 
1363:MOV,r480,4280 # 
1364:LLSHIFT,r480,r480,16 # 
1365:OR,r315,r315,r480 # 
1366:MOV,r310,32 # 
1367:MOV,r480,4280 # 
1368:LLSHIFT,r480,r480,16 # 
1369:OR,r310,r310,r480 # 
1370:MOV,r311,36 # 
1371:MOV,r480,4280 # 
1372:LLSHIFT,r480,r480,16 # 
1373:OR,r311,r311,r480 # 
1374:MOV,r312,40 # 
1375:MOV,r480,4280 # 
1376:LLSHIFT,r480,r480,16 # 
1377:OR,r312,r312,r480 # 
1378:MOV,r313,44 # 
1379:MOV,r480,4280 # 
1380:LLSHIFT,r480,r480,16 # 
1381:OR,r313,r313,r480 # 
1382:MOV,r483,1 # 
1383:STORE,r291,r483 # 
1384:MOV,r483,2 # 
1385:STORE,r315,r483 # 
1386:MOV,r483,0 # 
1387:STORE,r307,r483 # 
1388:MOV,r484,82 # 
1389:STORE,r308,r484 ##End SET_PCI_DMA_REGS 
1390:MOV,r298,1 # 
1391:MOV,r316,1 # 
1392:MOV,r261,0 # 
1393:MOV,r262,16 # 
1394:MOV,r263,1536 # 
1395:MOV,r266,1620 # 
1396:MOV,r265,0 # 
1397:MOV,r267,4 # 
1398:MOV,r268,1 # 
1399:MOV,r270,16384 # 
1400:MOV,r271,67108124 # 
1401:ADDI,r261,r261,1 # 
1402:MOV,r264,1 # 
1403:ADDI,r258,r259,0 # 
1404:SUB,r259,r259,r264 # 
1405:BRAGEZ,2 # 
1406:ADDI,r258,r264,0 # 
1407:MOV,r272,1 # 
1408:ADDI,r260,r273,0 # 
1409:ADDI,r300,r274,0 # 
1410:ADDI,r272,r275,0 # 
1411:MOV,r257,147 # 
1412:SUBI,r259,r259,0 # 
1413:BRAGEZ,2 # 
1414:MOV,r257,0 # 
1415:SUBI,r275,r275,1 # 
1416:BRALEZ,2 # 
1417:BRAUNCOND,5 # 
1418:MOV,r257,147 # 
1419:SUBI,r259,r259,0 # 
1420:BRAGEZ,2 # 
1421:MOV,r257,0 # 
1422:ADDI,r263,r482,84 ## Start START_INPUT_TFR_LAYER_CHECK 
1423:OR,r482,r482,r492 # 
1424:STORE,r482,r264 # # writre to ib_decr_reg
1425:OR,r263,r481,r492 # 
1426:ADDI,r481,r482,88 # 
1427:LOAD,r482,r483 # # read ib_cntr_reg 
1428:SUB,r483,r482,r264 # 
1429:BRAGEZ,4 # 
1430:MOV,r464,1369 # 
1431:MOV,r449,5 # 
1432:BRAUNCOND,-1369 # 
1433:OR,r263,r481,r492 # 
1434:ADDI,r481,r482,104 # 
1435:LOAD,r482,r483 # #read ob_cntr_reg 
1436:ADDI,r481,r482,96 # 
1437:LOAD,r482,r484 # # read ob_full_lvl_reg 
1438:SUB,r484,r482,r483 # 
1439:SUB,r482,r482,r264 # 
1440:BRAGEZ,4 # 
1441:MOV,r464,1380 # 
1442:MOV,r449,5 # 
1443:BRAUNCOND,-1380 ## End START_INPUT_TFR_LAYER_CHECK 
1444:MOV,r275,1 # 
1445:ADDI,r273,r279,0 # 
1446:MOV,r486,16383 # 
1447:AND,r279,r279,r486 # 
1448:ADDI,r279,r277,0 # 
1449:ADD,r277,r277,r257 # 
1450:SUB,r277,r277,r270 # 
1451:BRALEZ,2 # 
1452:BRAUNCOND,19 # 
1453:MOV,r481,1 # #Start START_EXTERNAL_IO 
1454:STORE,r306,r481 # 
1455:LOAD,r306,r481 # 
1456:STORE,r309,r257 # 
1457:STORE,r310,r273 # 
1458:STORE,r311,r299 # 
1459:STORE,r312,r274 # 
1460:STORE,r313,r301 # 
1461:MOV,r481,1 # 
1462:STORE,r292,r481 ##End START_EXTERNAL_IO 
1463:OR,r314,r314,r492 # #Start EXTERNAL_IO_DONE 
1464:LOAD,r314,r481 # 
1465:AND,r481,r481,r316 # 
1466:BRANZ,4 # 
1467:MOV,r464,1410 # 
1468:MOV,r449,5 # 
1469:BRAUNCOND,-1406 # End EXTERNAL_IO_DONE 
1470:BRAUNCOND,42 # 
1471:MOV,r281,16384 # 
1472:SUB,r281,r281,r279 # 
1473:MOV,r481,1 # #Start START_EXTERNAL_IO 
1474:STORE,r306,r481 # 
1475:LOAD,r306,r481 # 
1476:STORE,r309,r281 # 
1477:STORE,r310,r273 # 
1478:STORE,r311,r299 # 
1479:STORE,r312,r274 # 
1480:STORE,r313,r301 # 
1481:MOV,r481,1 # 
1482:STORE,r292,r481 ##End START_EXTERNAL_IO 
1483:OR,r314,r314,r492 # #Start EXTERNAL_IO_DONE 
1484:LOAD,r314,r481 # 
1485:AND,r481,r481,r316 # 
1486:BRANZ,4 # 
1487:MOV,r464,1430 # 
1488:MOV,r449,5 # 
1489:BRAUNCOND,-1426 # End EXTERNAL_IO_DONE 
1490:ADDI,r274,r282,0 # 
1491:ADD,r282,r282,r281 # 
1492:ADDI,r273,r283,0 # 
1493:MOV,r486,-16384 # 
1494:AND,r283,r283,r486 # 
1495:MOV,r481,1 # #Start START_EXTERNAL_IO 
1496:STORE,r306,r481 # 
1497:LOAD,r306,r481 # 
1498:STORE,r309,r277 # 
1499:STORE,r310,r283 # 
1500:STORE,r311,r299 # 
1501:STORE,r312,r282 # 
1502:STORE,r313,r301 # 
1503:MOV,r481,1 # 
1504:STORE,r292,r481 ##End START_EXTERNAL_IO 
1505:OR,r314,r314,r492 # #Start EXTERNAL_IO_DONE 
1506:LOAD,r314,r481 # 
1507:AND,r481,r481,r316 # 
1508:BRANZ,4 # 
1509:MOV,r464,1452 # 
1510:MOV,r449,5 # 
1511:BRAUNCOND,-1448 # End EXTERNAL_IO_DONE 
1512:ADDI,r273,r276,0 # 
1513:ADD,r276,r276,r257 # 
1514:MOV,r486,16383 # 
1515:AND,r276,r276,r486 # 
1516:MOV,r486,-16384 # 
1517:AND,r273,r273,r486 # 
1518:ADD,r273,r273,r276 # 
1519:ADD,r274,r274,r257 # 
1520:SUBI,r272,r272,1 # 
1521:BRALEZ,2 # 
1522:BRAUNCOND,-107 # 
1523:MOV,r278,1 # 
1524:ADDI,r264,r259,0 # 
1525:MOV,r269,1 # 
1526:OR,r266,r480,r492 # 
1527:STORE,r480,r278 # 
1528:MOV,r481,1028 # 
1529:OR,r481,r481,r492 # 
1530:STORE,r481,r262 # # End POP_SYNC - write to ib_decr_reg
1531:MOV,r481,1032 ## Start SEND_SYNC_PREV 
1532:OR,r481,r481,r492 # 
1533:STORE,r481,r262 ## End SEND_SYNC_PREV - write to asq_send_reg
1534:MOV,r482,1048 ## Start SEND_SYNC_NEXT 
1535:OR,r482,r482,r492 # 
1536:STORE,r482,r262 # # End SEND_SYNC_NEXT
1537:MOV,r481,1044 # # Start END_BLOCK_EXTERNAL 
1538:OR,r481,r481,r492 # 
1539:STORE,r481,r262 ## write to ob_incr_reg - End END_BLOCK_EXTERNAL 
1540:SUBI,r259,r259,1 # 
1541:BRALEZ,2 # 
1542:BRAUNCOND,-16 # 
1543:ADD,r300,r300,r257 # 
1544:ADD,r280,r280,r257 # 
1545:MOV,r486,16383 # 
1546:AND,r280,r280,r486 # 
1547:MOV,r486,-16384 # 
1548:AND,r260,r260,r486 # 
1549:ADD,r260,r260,r280 # 
1550:SUBI,r258,r258,1 # 
1551:BRALEZ,2 # 
1552:BRAUNCOND,-153 # 
1553:MOV,r284,16 # 
1554:MOV,r285,4 # 
1555:MOV,r286,1640 # 
1556:MOV,r287,1 # 
1557:MOV,r289,128 # 
1558:MOV,r480,784 # 
1559:LLSHIFT,r480,r480,16 # 
1560:OR,r289,r289,r480 # 
1561:NOP ##Start SET_UP_NEXT 
1562:NOP # 
1563:NOP # 
1564:MOV,r464,1259 # 
1565:MOV,r449,4 # 
1566:BRAUNCOND,-1503 # #Branch to the same layer, instruction start location
1567:NOP # 
1568:NOP # 
1569:NOP # 
1570:NOP # 
1571:HALT # 
1572:NOP ##End SET_UP_NEXT 
1573:MOV,r324,32768 # 
1574:MOV,r480,769 # 
1575:LLSHIFT,r480,r480,16 # 
1576:OR,r324,r324,r480 # 
1577:MOV,r363,1 # 
1578:MOV,r480,0 # 
1579:LLSHIFT,r480,r480,16 # 
1580:OR,r363,r363,r480 # 
1581:MOV,r344,0 # 
1582:MOV,r366,65060 # 
1583:MOV,r480,799 # 
1584:LLSHIFT,r480,r480,16 # 
1585:OR,r366,r366,r480 # 
1586:MOV,r367,65064 # 
1587:MOV,r480,799 # 
1588:LLSHIFT,r480,r480,16 # 
1589:OR,r367,r367,r480 # 
1590:LOAD,r366,r364 ##Start INIT_WRITE_DATA_STRUCT 
1591:LOAD,r367,r365 ##End INIT_WRITE_DATA_STRUCT
1592:MOV,r353,128 # 
1593:MOV,r480,784 # 
1594:LLSHIFT,r480,r480,16 # 
1595:OR,r353,r353,r480 # 
1596:MOV,r480,0 # # start STORE_TO_MEMORY 
1597:STORE,r353,r480 # # end STORE_TO_MEMORY - write data to address
1598:MOV,r321,147 # 
1599:MOV,r322,7 # 
1600:MOV,r361,132 # 
1601:MOV,r480,4280 # 
1602:LLSHIFT,r480,r480,16 # 
1603:OR,r361,r361,r480 # 
1604:MOV,r378,224 # 
1605:MOV,r480,0 # 
1606:LLSHIFT,r480,r480,16 # 
1607:OR,r378,r378,r480 # 
1608:MOV,r355,0 # 
1609:MOV,r480,4280 # 
1610:LLSHIFT,r480,r480,16 # 
1611:OR,r355,r355,r480 # 
1612:MOV,r356,4 # 
1613:MOV,r480,4280 # 
1614:LLSHIFT,r480,r480,16 # 
1615:OR,r356,r356,r480 # 
1616:MOV,r370,140 # 
1617:MOV,r480,4280 # 
1618:LLSHIFT,r480,r480,16 # 
1619:OR,r370,r370,r480 # 
1620:MOV,r371,52 # 
1621:MOV,r480,4280 # 
1622:LLSHIFT,r480,r480,16 # 
1623:OR,r371,r371,r480 # 
1624:MOV,r372,136 # 
1625:MOV,r480,4280 # 
1626:LLSHIFT,r480,r480,16 # 
1627:OR,r372,r372,r480 # 
1628:MOV,r373,28 # 
1629:MOV,r480,4280 # 
1630:LLSHIFT,r480,r480,16 # 
1631:OR,r373,r373,r480 # 
1632:MOV,r379,48 # 
1633:MOV,r480,4280 # 
1634:LLSHIFT,r480,r480,16 # 
1635:OR,r379,r379,r480 # 
1636:MOV,r374,32 # 
1637:MOV,r480,4280 # 
1638:LLSHIFT,r480,r480,16 # 
1639:OR,r374,r374,r480 # 
1640:MOV,r375,36 # 
1641:MOV,r480,4280 # 
1642:LLSHIFT,r480,r480,16 # 
1643:OR,r375,r375,r480 # 
1644:MOV,r376,40 # 
1645:MOV,r480,4280 # 
1646:LLSHIFT,r480,r480,16 # 
1647:OR,r376,r376,r480 # 
1648:MOV,r377,44 # 
1649:MOV,r480,4280 # 
1650:LLSHIFT,r480,r480,16 # 
1651:OR,r377,r377,r480 # 
1652:MOV,r483,1 # 
1653:STORE,r355,r483 # 
1654:MOV,r483,2 # 
1655:STORE,r379,r483 # 
1656:MOV,r483,0 # 
1657:STORE,r371,r483 # 
1658:MOV,r484,82 # 
1659:STORE,r372,r484 ##End SET_PCI_DMA_REGS 
1660:MOV,r362,1 # 
1661:MOV,r380,1 # 
1662:MOV,r325,0 # 
1663:MOV,r326,32 # 
1664:MOV,r327,1648 # 
1665:MOV,r330,1732 # 
1666:MOV,r329,0 # 
1667:MOV,r331,5 # 
1668:MOV,r332,1 # 
1669:MOV,r334,16384 # 
1670:MOV,r335,67108124 # 
1671:ADDI,r325,r325,1 # 
1672:MOV,r328,1 # 
1673:ADDI,r322,r323,0 # 
1674:SUB,r323,r323,r328 # 
1675:BRAGEZ,2 # 
1676:ADDI,r322,r328,0 # 
1677:MOV,r336,1 # 
1678:ADDI,r324,r337,0 # 
1679:ADDI,r364,r338,0 # 
1680:ADDI,r336,r339,0 # 
1681:MOV,r321,147 # 
1682:SUBI,r323,r323,0 # 
1683:BRAGEZ,2 # 
1684:MOV,r321,0 # 
1685:SUBI,r339,r339,1 # 
1686:BRALEZ,2 # 
1687:BRAUNCOND,5 # 
1688:MOV,r321,147 # 
1689:SUBI,r323,r323,0 # 
1690:BRAGEZ,2 # 
1691:MOV,r321,0 # 
1692:ADDI,r327,r482,84 ## Start START_INPUT_TFR_LAYER_CHECK 
1693:OR,r482,r482,r492 # 
1694:STORE,r482,r328 # # writre to ib_decr_reg
1695:OR,r327,r481,r492 # 
1696:ADDI,r481,r482,88 # 
1697:LOAD,r482,r483 # # read ib_cntr_reg 
1698:SUB,r483,r482,r328 # 
1699:BRAGEZ,4 # 
1700:MOV,r465,1636 # 
1701:MOV,r449,6 # 
1702:BRAUNCOND,-1639 # 
1703:OR,r327,r481,r492 # 
1704:ADDI,r481,r482,104 # 
1705:LOAD,r482,r483 # #read ob_cntr_reg 
1706:ADDI,r481,r482,96 # 
1707:LOAD,r482,r484 # # read ob_full_lvl_reg 
1708:SUB,r484,r482,r483 # 
1709:SUB,r482,r482,r328 # 
1710:BRAGEZ,4 # 
1711:MOV,r465,1647 # 
1712:MOV,r449,6 # 
1713:BRAUNCOND,-1650 ## End START_INPUT_TFR_LAYER_CHECK 
1714:MOV,r339,1 # 
1715:ADDI,r337,r343,0 # 
1716:MOV,r486,16383 # 
1717:AND,r343,r343,r486 # 
1718:ADDI,r343,r341,0 # 
1719:ADD,r341,r341,r321 # 
1720:SUB,r341,r341,r334 # 
1721:BRALEZ,2 # 
1722:BRAUNCOND,19 # 
1723:MOV,r481,1 # #Start START_EXTERNAL_IO 
1724:STORE,r370,r481 # 
1725:LOAD,r370,r481 # 
1726:STORE,r373,r321 # 
1727:STORE,r374,r337 # 
1728:STORE,r375,r363 # 
1729:STORE,r376,r338 # 
1730:STORE,r377,r365 # 
1731:MOV,r481,1 # 
1732:STORE,r356,r481 ##End START_EXTERNAL_IO 
1733:OR,r378,r378,r492 # #Start EXTERNAL_IO_DONE 
1734:LOAD,r378,r481 # 
1735:AND,r481,r481,r380 # 
1736:BRANZ,4 # 
1737:MOV,r465,1677 # 
1738:MOV,r449,6 # 
1739:BRAUNCOND,-1676 # End EXTERNAL_IO_DONE 
1740:BRAUNCOND,42 # 
1741:MOV,r345,16384 # 
1742:SUB,r345,r345,r343 # 
1743:MOV,r481,1 # #Start START_EXTERNAL_IO 
1744:STORE,r370,r481 # 
1745:LOAD,r370,r481 # 
1746:STORE,r373,r345 # 
1747:STORE,r374,r337 # 
1748:STORE,r375,r363 # 
1749:STORE,r376,r338 # 
1750:STORE,r377,r365 # 
1751:MOV,r481,1 # 
1752:STORE,r356,r481 ##End START_EXTERNAL_IO 
1753:OR,r378,r378,r492 # #Start EXTERNAL_IO_DONE 
1754:LOAD,r378,r481 # 
1755:AND,r481,r481,r380 # 
1756:BRANZ,4 # 
1757:MOV,r465,1697 # 
1758:MOV,r449,6 # 
1759:BRAUNCOND,-1696 # End EXTERNAL_IO_DONE 
1760:ADDI,r338,r346,0 # 
1761:ADD,r346,r346,r345 # 
1762:ADDI,r337,r347,0 # 
1763:MOV,r486,-16384 # 
1764:AND,r347,r347,r486 # 
1765:MOV,r481,1 # #Start START_EXTERNAL_IO 
1766:STORE,r370,r481 # 
1767:LOAD,r370,r481 # 
1768:STORE,r373,r341 # 
1769:STORE,r374,r347 # 
1770:STORE,r375,r363 # 
1771:STORE,r376,r346 # 
1772:STORE,r377,r365 # 
1773:MOV,r481,1 # 
1774:STORE,r356,r481 ##End START_EXTERNAL_IO 
1775:OR,r378,r378,r492 # #Start EXTERNAL_IO_DONE 
1776:LOAD,r378,r481 # 
1777:AND,r481,r481,r380 # 
1778:BRANZ,4 # 
1779:MOV,r465,1719 # 
1780:MOV,r449,6 # 
1781:BRAUNCOND,-1718 # End EXTERNAL_IO_DONE 
1782:ADDI,r337,r340,0 # 
1783:ADD,r340,r340,r321 # 
1784:MOV,r486,16383 # 
1785:AND,r340,r340,r486 # 
1786:MOV,r486,-16384 # 
1787:AND,r337,r337,r486 # 
1788:ADD,r337,r337,r340 # 
1789:ADD,r338,r338,r321 # 
1790:SUBI,r336,r336,1 # 
1791:BRALEZ,2 # 
1792:BRAUNCOND,-107 # 
1793:MOV,r342,1 # 
1794:ADDI,r328,r323,0 # 
1795:MOV,r333,1 # 
1796:OR,r330,r480,r492 # 
1797:STORE,r480,r342 # 
1798:MOV,r481,1028 # 
1799:OR,r481,r481,r492 # 
1800:STORE,r481,r326 # # End POP_SYNC - write to ib_decr_reg
1801:MOV,r481,1032 ## Start SEND_SYNC_PREV 
1802:OR,r481,r481,r492 # 
1803:STORE,r481,r326 ## End SEND_SYNC_PREV - write to asq_send_reg
1804:MOV,r482,1048 ## Start SEND_SYNC_NEXT 
1805:OR,r482,r482,r492 # 
1806:STORE,r482,r326 # # End SEND_SYNC_NEXT
1807:MOV,r481,1044 # # Start END_BLOCK_EXTERNAL 
1808:OR,r481,r481,r492 # 
1809:STORE,r481,r326 ## write to ob_incr_reg - End END_BLOCK_EXTERNAL 
1810:SUBI,r323,r323,1 # 
1811:BRALEZ,2 # 
1812:BRAUNCOND,-16 # 
1813:ADD,r364,r364,r321 # 
1814:ADD,r344,r344,r321 # 
1815:MOV,r486,16383 # 
1816:AND,r344,r344,r486 # 
1817:MOV,r486,-16384 # 
1818:AND,r324,r324,r486 # 
1819:ADD,r324,r324,r344 # 
1820:SUBI,r322,r322,1 # 
1821:BRALEZ,2 # 
1822:BRAUNCOND,-153 # 
1823:MOV,r348,32 # 
1824:MOV,r349,5 # 
1825:MOV,r350,1752 # 
1826:MOV,r351,1 # 
1827:MOV,r353,128 # 
1828:MOV,r480,784 # 
1829:LLSHIFT,r480,r480,16 # 
1830:OR,r353,r353,r480 # 
1831:NOP ##Start SET_UP_NEXT 
1832:NOP # 
1833:NOP # 
1834:MOV,r465,1526 # 
1835:MOV,r449,5 # 
1836:BRAUNCOND,-1773 # #Branch to the same layer, instruction start location
1837:NOP # 
1838:NOP # 
1839:NOP # 
1840:NOP # 
1841:HALT # 
1842:NOP ##End SET_UP_NEXT 
